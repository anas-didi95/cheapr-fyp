version: '3'

services:
    backend:
        build:
            context: ./services/backend 
            args:
                DOCKER_USER_NAME: ${DOCKER_USER_NAME}
                DOCKER_USER_ID: ${DOCKER_USER_ID}
                DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
        user: ${DOCKER_USER_ID}:${DOCKER_GROUP_ID}
        tty: true
        command: ['gunicorn','api.wsgi','-b 0.0.0.0:8000','-w 4','--reload']
        ports:
            - '8000:8000'
        volumes:
            - '/etc/passwd:/etc/passwd:ro'
            - '/etc/group:/etc/group:ro'
            - './backend:/home/code'
        depends_on:
            - database
    
    database:
        build:
            context: ./services/database
        restart: always
        ports:
            - '5432:5432'
        volumes:
            - 'pgdata:/var/lib/postgresql/data'
        environment:
            POSTGRES_USER: 'postgres'
            POSTGRES_PASSWORD: 'postgres'
            POSTGRES_DB: 'postgres'

    frontend:
        build:
            context: ./services/frontend
            args:
                DOCKER_USER_NAME: ${DOCKER_USER_NAME}
                DOCKER_USER_ID: ${DOCKER_USER_ID}
                DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
        user: ${DOCKER_USER_ID}:${DOCKER_GROUP_ID}
        tty: true
        ports:
            - '8080:8080'
        volumes:
            - '/etc/passwd:/etc/passwd:ro'
            - '/etc/group:/etc/group:ro'
            - './frontend:/home/code'
        depends_on:
            - backend

    proxy:
        build:
            context: ./services/proxy
        restart: always
        ports:
            - '80:80'
            - '8000:8000'
        volumes:
            - './services/proxy/default.conf:/etc/nginx/conf.d/default.conf'
            - './frontend/dist:/var/www/html'
            - 'nglogs:/var/log/nginx'
        depends_on:
            - backend
            - frontend

volumes:
    pgdata:
    nglogs:
